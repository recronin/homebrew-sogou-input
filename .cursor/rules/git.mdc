---
description: 
globs: 
alwaysApply: true
---
# Git Commit Rules

## Enforce Git Hooks

When using Git commands in this repository, ensure that hooks are respected.
**These rules apply in ALL circumstances without exception.**

### Strictly Prohibited Commands

- `git commit --no-verify` - **NEVER ALLOWED**
- Any Git command with the `--no-verify` flag - **NEVER ALLOWED**
- Temporarily disabling or modifying pre-commit hooks - **NEVER ALLOWED**

### Strictly Prohibited Practices

- Modifying linter configuration files to relax rules - **NEVER ALLOWED**
- Deleting configuration files to avoid linting checks - **NEVER ALLOWED**
- Creating temporary branches to bypass hook checks - **NEVER ALLOWED**
- Any technique that aims to circumvent quality standards - **NEVER ALLOWED**

### Mandatory Practices

- Always run `git commit` without the `--no-verify` flag
- Fix all issues reported by pre-commit hooks before committing
- If you encounter hook-related errors, fix the underlying issues
- If hooks need to be modified, ensure they still perform required checks
- If config files need updating, discuss with team and maintain quality

### Enforcement

- Violations of these rules will be treated as serious breaches
- Automated tools will monitor compliance with these rules
- Repeated violations may result in restricted repository access

### No Exceptions

There are **NO exceptions** to these rules, even for:

- Initial commits
- Emergency fixes
- Temporary workarounds
- Any other special circumstances

### Special Circumstances Protocol

While the rules above are strictly enforced, if you believe there is a truly
exceptional situation (such as major repository restructuring):

1. Document the specific situation in detail
2. Explain why standard procedures cannot be followed
3. Present the proposal to the repository maintainer(s)
4. Wait for explicit written confirmation before proceeding
5. Document the exception and approval in the commit message

Note that approval for exceptions is extremely rare and will only be considered
after all other options have been exhausted.

### Rationale

Pre-commit hooks are essential for maintaining code quality and consistency.
They ensure that all committed code meets the project's standards.

Bypassing these checks undermines the quality control process and can lead
to inconsistent code in the repository.
